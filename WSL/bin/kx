#! /usr/bin/env python3
'''kubectx setter'''
import argparse
from subprocess import check_call, check_output

OPTIONS = {
        'dev-prototype': 'en-development',
        'dev-stable': 'en-development',
        'test-stable': 'en-testing',
        'production': 'en-production'
}

def main(args):
    '''main'''
    if args.options:
        return print(' '.join(OPTIONS.keys()))
    if args.current:
        ctx = check_output(['kubectx', '-c']).decode().strip()
        namespace = check_output(['kubens', '-c']).decode().strip()
        print(f'Context: {ctx}\nNamespace: {namespace}')
    if args.env not in OPTIONS:
        return 1
    check_call(['gcloud', 'config', 'configurations', 'activate', OPTIONS[args.env]])
    check_call(['kubectx', args.env])
    return 0



#pylint: disable=invalid-name
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='')
    parser.add_argument('env', default=None, nargs='?', type=str,
                        choices=OPTIONS.keys(), help='The env to set to')
    parser.add_argument('-o', '--options', action='store_true', default=False, help='show options')
    parser.add_argument('-c', '--current', action='store_true', default=False, help='show current')

    arguments = parser.parse_args()
    if arguments.env is None and not(arguments.options or arguments.current):
        parser.error('env is required.')
    main(arguments)
