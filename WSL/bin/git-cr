#! /usr/bin/env python3
#pylint: disable=invalid-name
'''git-cr wraps the cr tool to allow for proper git workflow.'''

import argparse
from subprocess import Popen, PIPE, check_call, CalledProcessError

REMOTE='origin'

def run_cmd(cmd):
    try:
        check_call(cmd)
    except CalledProcessError as err:
        return err.returncode
    return 0
def get_response(cmd):
    sub = Popen(cmd, stdout=PIPE)
    stdout, _ = sub.communicate()
    if sub.returncode != 0:
        raise CalledProcessError(sub.returncode)
    return stdout.rstrip()

def get_current_branch():
    '''get the current branch name'''
    cmd = ['git', 'rev-parse', '--abbrev-ref', 'HEAD']
    try:
        return get_response(cmd)
    except CalledProcessError:
        return None


def run_chained_cmds(cmds):
    '''run commands in line unless rc of previous not ok'''
    for cmd in cmds:
        status = run_cmd(cmd)
        if status != 0:
            return status
    return 0

def main(args):
    '''Main code entry.'''
    args = parser.parse_args()
    cur_branch = get_current_branch()
    if cur_branch is None:
        print('Failed to find current branch, will not continue.')
        exit(1)
    if args.parent.find('/') >= 0:
        parent = args.parent
        remote = args.parent.split('/')[0]
    else:
        remote = REMOTE
        parent = '{}/{}'.format(remote, args.parent)

    #update the destination
    if run_cmd(['git', 'fetch', remote]) != 0:
        print('failed to update {}.'.format(remote))
        exit(2)
    #check if cur_branch is ontop of remote/parent
    merge_base = get_response(['git', 'merge-base', cur_branch, parent])
    head_parent = get_response(['git', 'rev-parse', '--verify', parent])
    if merge_base != head_parent:
        print('{} does not appear to be rebased on top of {}.'.format(cur_branch, parent))
        exit(3)


    #set tracking then create cr, then remove tracking
    cmds = [
        ['git', 'branch', '--set-upstream-to', parent],
        ['cr'],
        ['git', 'branch', '--unset-upstream'],
        ]
    exit(run_chained_cmds(cmds))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='create a cr between current branch and parent')
    parser.add_argument('parent', type=str, help='the parent branch to diff from.')
    args = parser.parse_args()
    main(args)


    

